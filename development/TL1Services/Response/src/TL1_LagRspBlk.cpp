/*--------------------------------------------------------------.0---------------
   Copyright(c) Tellabs Transport Group Inc. All rights reserved.

SUBSYSTEM: 
TARGET:
AUTHOR:         May 14, 2003- Automatically generated by DBCHG generator
DESCRIPTION:    
-----------------------------------------------------------------------------*/

#include <Response/TL1_LagRspBlk.h>

TL1_LagRspBlk::TL1_LagRspBlk(const TL1_SmartParameter<CT_TL1_FacAddr>& theAid,
                             const TL1_SmartParameter<CT_TL1_FacAddr>& theFac1Addr,
                             const TL1_SmartParameter<CT_FacilitySubType>& theFac1Type,
                             const TL1_SmartParameter<CT_TL1_FacAddr>& theFac2Addr,
                             const TL1_SmartParameter<CT_FacilitySubType>& theFac2Type,
                             const TL1_SmartParameter<TL1_FacAddr_List>& theMemberList,
                             const TL1_SmartParameter<CT_FacilitySubType>& theMemberFacType,
                             const TL1_SmartParameter<CT_TEL_VlanTag>& theVlanTag,
                             const TL1_SmartParameter<bool>& theTagMode,
                             const TL1_SmartParameter<CT_TEL_Tpid>& theTpid,
                             const TL1_SmartParameter<int>&  theCFProfile,     
                             const TL1_SmartParameter<bool>& theLacpEnabled,
                             const TL1_SmartParameter<int>& theLacpSystemPriority,
                             const TL1_SmartParameter<CT_LacpSystemId>& theLacpSystemId,
                             const TL1_SmartParameter<CT_TEL_LacpTimeoutMode>& theLacpTimeoutMode,
                             const TL1_SmartParameter<CT_ProfileTableId>&  theAlarmProfile,     
                             const TL1_SmartParameter<CT_SM_PST>&  thePST,
                             const TL1_SmartParameter<CT_SM_PSTQ>& thePSTQ,
                             const TL1_SmartParameter<CT_SM_SST>&  theSST) :
    myAid(theAid),
    myFac1Addr(theFac1Addr),
    myFac1Type(theFac1Type),
    myFac2Addr(theFac2Addr),
    myFac2Type(theFac2Type),
    myMemberList(theMemberList),
    myMemberFacType(theMemberFacType),
    myAlarmProfile(theAlarmProfile),
    myPST(thePST),
    myPSTQ(thePSTQ),
    mySST(theSST),
    myMemberAddr(0),
    myMemberType(FAC_SUBTYPE_UNKNOWN),
    myVlanTag(theVlanTag),
    myTagMode(theTagMode),
    myTpid(theTpid),
    myCFProfile(theCFProfile),
    myLacpEnabled(theLacpEnabled),
    myLacpSystemPriority(theLacpSystemPriority),
    myLacpSystemId(theLacpSystemId),
    myLacpTimeoutMode(theLacpTimeoutMode)
{
}


TL1_LagRspBlk::TL1_LagRspBlk(const TL1_SmartParameter<CT_TL1_FacAddr>& theAid,
                             const TL1_SmartParameter<CT_TL1_FacAddr>& theFac1Addr,
                             const TL1_SmartParameter<CT_FacilitySubType>& theFac1Type,
                             const TL1_SmartParameter<CT_TL1_FacAddr>& theFac2Addr,
                             const TL1_SmartParameter<CT_FacilitySubType>& theFac2Type,
                             const TL1_SmartParameter<TL1_FacAddr_List>& theMemberList,
                             const TL1_SmartParameter<CT_FacilitySubType>& theMemberFacType,
                             const TL1_SmartParameter<CT_TEL_VlanTag>& theVlanTag,
                             const TL1_SmartParameter<bool>& theTagMode,
                             const TL1_SmartParameter<CT_TEL_Tpid>& theTpid,
                             const TL1_SmartParameter<int>&  theCFProfile,     
                             const TL1_SmartParameter<bool>& theLacpEnabled,
                             const TL1_SmartParameter<int>& theLacpSystemPriority,
                             const TL1_SmartParameter<CT_LacpSystemId>& theLacpSystemId,
                             const TL1_SmartParameter<CT_TEL_LacpTimeoutMode>& theLacpTimeoutMode,
                             const TL1_SmartParameter<int>& theActLacpSystemPriority,
                             const TL1_SmartParameter<CT_LacpSystemId>& theActLacpSystemId,
                             const TL1_SmartParameter<uint32>& theActLacpAdminKey,
                             const TL1_SmartParameter<int>& thePtnLacpSystemPriority,
                             const TL1_SmartParameter<CT_LacpSystemId>& thePtnLacpSystemId,
                             const TL1_SmartParameter<uint32>& thePtnLacpAdminKey,
                             const TL1_SmartParameter<CT_ProfileTableId>&  theAlarmProfile,     
                             const TL1_SmartParameter<CT_SM_PST>&  thePST,
                             const TL1_SmartParameter<CT_SM_PSTQ>& thePSTQ,
                             const TL1_SmartParameter<CT_SM_SST>&  theSST) :
    myAid(theAid),
    myFac1Addr(theFac1Addr),
    myFac1Type(theFac1Type),
    myFac2Addr(theFac2Addr),
    myFac2Type(theFac2Type),
    myMemberList(theMemberList),
    myMemberFacType(theMemberFacType),
    myAlarmProfile(theAlarmProfile),
    myPST(thePST),
    myPSTQ(thePSTQ),
    mySST(theSST),
    myMemberAddr(0),
    myMemberType(FAC_SUBTYPE_UNKNOWN),
    myVlanTag(theVlanTag),
    myTagMode(theTagMode),
    myTpid(theTpid),
    myCFProfile(theCFProfile),
    myLacpEnabled(theLacpEnabled),
    myLacpSystemPriority(theLacpSystemPriority),
    myLacpSystemId(theLacpSystemId),
    myActLacpSystemPriority(theActLacpSystemPriority),
    myActLacpSystemId(theActLacpSystemId),
    myActLacpAdminKey(theActLacpAdminKey),
    myPtnLacpSystemPriority(thePtnLacpSystemPriority),
    myPtnLacpSystemId(thePtnLacpSystemId),
    myPtnLacpAdminKey(thePtnLacpAdminKey),
    myLacpTimeoutMode(theLacpTimeoutMode)
{
}

TL1_LagRspBlk::TL1_LagRspBlk(const TL1_SmartParameter<CT_TL1_FacAddr>& theAid,
                             const TL1_SmartParameter<CT_TL1_FacAddr>& theMemberAddr,
                             const TL1_SmartParameter<CT_FacilitySubType>& theMemberType,
                             const TL1_SmartParameter<int>& theLacpPriorityMbr,
                             const TL1_SmartParameter<CT_TEL_LacpPartiMode>& theLacpPartiModeMbr,
                             const TL1_SmartParameter<CT_TEL_LacpPortState>& theLacpPortState,
                             const TL1_SmartParameter<CT_SM_PST>&  thePST,
                             const TL1_SmartParameter<CT_SM_PSTQ>& thePSTQ,
                             const TL1_SmartParameter<CT_SM_SST>&  theSST) :
    myAid(theAid),
    myFac1Addr(0),
    myFac1Type(FAC_SUBTYPE_UNKNOWN),
    myFac2Addr(0),
    myFac2Type(FAC_SUBTYPE_UNKNOWN),
    myMemberList(0),
    myMemberFacType(FAC_SUBTYPE_UNKNOWN),
    myAlarmProfile(CT_UNKNOWN_PT),
    myPST(thePST),
    myPSTQ(thePSTQ),
    mySST(theSST),
    myMemberAddr(theMemberAddr),
    myMemberType(theMemberType),
    myCFProfile(99),
    myLacpPriorityMbr(theLacpPriorityMbr),
    myLacpPartiModeMbr(theLacpPartiModeMbr),
    myLacpPortState(theLacpPortState)
{
}


TL1_LagRspBlk::TL1_LagRspBlk(const TL1_LagRspBlk& rspBlk) :
    myAid(rspBlk.myAid),
    myFac1Addr(rspBlk.myFac1Addr),
    myFac1Type(rspBlk.myFac1Type),
    myFac2Addr(rspBlk.myFac2Addr),
    myFac2Type(rspBlk.myFac2Type),
    myMemberList(rspBlk.myMemberList),
    myMemberFacType(rspBlk.myMemberFacType),
    myAlarmProfile(rspBlk.myAlarmProfile),
    myPST(rspBlk.myPST),
    myPSTQ(rspBlk.myPSTQ),
    mySST(rspBlk.mySST),
    myMemberAddr(rspBlk.myMemberAddr),
    myMemberType(rspBlk.myMemberType),
    myVlanTag(rspBlk.myVlanTag),
    myTagMode(rspBlk.myTagMode),
    myTpid(rspBlk.myTpid),
    myCFProfile(rspBlk.myCFProfile),
    myLacpEnabled(rspBlk.myLacpEnabled),
    myLacpSystemPriority(rspBlk.myLacpSystemPriority),
    myLacpSystemId(rspBlk.myLacpSystemId),
    myLacpTimeoutMode(rspBlk.myLacpTimeoutMode),
    myLacpPriorityMbr(rspBlk.myLacpPriorityMbr),
    myLacpPartiModeMbr(rspBlk.myLacpPartiModeMbr),
    myLacpPortState(rspBlk.myLacpPortState),
    myActLacpSystemPriority(rspBlk.myActLacpSystemPriority),
    myActLacpSystemId(rspBlk.myActLacpSystemId),
    myActLacpAdminKey(rspBlk.myActLacpAdminKey),
    myPtnLacpSystemPriority(rspBlk.myPtnLacpSystemPriority),
    myPtnLacpSystemId(rspBlk.myPtnLacpSystemId),
    myPtnLacpAdminKey(rspBlk.myPtnLacpAdminKey)
{
}

TL1_LagRspBlk::~TL1_LagRspBlk()
{
}

TL1_LagRspBlk&TL1_LagRspBlk::operator=( const TL1_LagRspBlk& theBlock )
{
    myAid=             theBlock.myAid;
    myFac1Addr=        theBlock.myFac1Addr;
    myFac1Type=        theBlock.myFac1Type;
    myFac2Addr=        theBlock.myFac2Addr;
    myFac2Type=        theBlock.myFac2Type;
    myMemberList=      theBlock.myMemberList;
    myMemberFacType=   theBlock.myMemberFacType;
    myAlarmProfile=    theBlock.myAlarmProfile;
    myPST=             theBlock.myPST;
    myPSTQ=            theBlock.myPSTQ;
    mySST=             theBlock.mySST;
    myMemberAddr=      theBlock.myMemberAddr;
    myMemberType=      theBlock.myMemberType;
    myVlanTag =        theBlock.myVlanTag;
    myTagMode =        theBlock.myTagMode;
    myTpid =           theBlock.myTpid;
    myCFProfile =      theBlock.myCFProfile;
    myLacpEnabled =    theBlock.myLacpEnabled;
    myLacpSystemPriority = theBlock.myLacpSystemPriority;
    myLacpSystemId     =   theBlock.myLacpSystemId;
    myLacpTimeoutMode  =   theBlock.myLacpTimeoutMode;
    myLacpPriorityMbr  =   theBlock.myLacpPriorityMbr;
    myLacpPartiModeMbr =   theBlock.myLacpPartiModeMbr;
    myLacpPortState    =   theBlock.myLacpPortState;
    myActLacpSystemPriority = theBlock.myActLacpSystemPriority;
    myActLacpSystemId       = theBlock.myActLacpSystemId;
    myActLacpAdminKey       = theBlock.myActLacpAdminKey;
    myPtnLacpSystemPriority = theBlock.myPtnLacpSystemPriority;
    myPtnLacpSystemId       = theBlock.myPtnLacpSystemId;
    myPtnLacpAdminKey       = theBlock.myPtnLacpAdminKey;
    return *this;
}

bool TL1_LagRspBlk::operator==( const TL1_LagRspBlk& theBlock ) const
{
    return ( myAid             == theBlock.myAid &&
             myFac1Addr        == theBlock.myFac1Addr &&
             myFac1Type        == theBlock.myFac1Type &&
             myFac2Addr        == theBlock.myFac2Addr &&
             myFac2Type        == theBlock.myFac2Type &&
             myMemberList      == theBlock.myMemberList &&
             myMemberFacType   == theBlock.myMemberFacType &&
             myAlarmProfile    == theBlock.myAlarmProfile &&
             myPST             == theBlock.myPST &&
             myPSTQ            == theBlock.myPSTQ &&
             mySST             == theBlock.mySST &&
             myMemberAddr      == theBlock.myMemberAddr &&
             myMemberType      == theBlock.myMemberType &&
             myVlanTag         == theBlock.myVlanTag &&
             myTagMode         == theBlock.myTagMode &&
             myTpid            == theBlock.myTpid &&
             myCFProfile       == theBlock.myCFProfile &&
             myLacpEnabled     == theBlock.myLacpEnabled &&
             myLacpSystemPriority == theBlock.myLacpSystemPriority &&
             myLacpSystemId       == theBlock.myLacpSystemId &&
             myLacpTimeoutMode    == theBlock.myLacpTimeoutMode &&
             myLacpPriorityMbr    ==  theBlock.myLacpPriorityMbr &&
             myLacpPartiModeMbr   ==  theBlock.myLacpPartiModeMbr &&
             myLacpPortState      ==  theBlock.myLacpPortState &&
             myActLacpSystemPriority == theBlock.myActLacpSystemPriority &&
             myActLacpSystemId       == theBlock.myActLacpSystemId &&
             myActLacpAdminKey       == theBlock.myActLacpAdminKey &&
             myPtnLacpSystemPriority == theBlock.myPtnLacpSystemPriority &&
             myPtnLacpSystemId       == theBlock.myPtnLacpSystemId &&
             myPtnLacpAdminKey       == theBlock.myPtnLacpAdminKey);
}

//------------------------------------------------------------------------------------

TL1_LagMemberRspBlk::TL1_LagMemberRspBlk(const TL1_SmartParameter<CT_TL1_FacAddr>& theAid,
                             const TL1_SmartParameter<CT_TL1_FacAddr>& theFac1Addr,
                             const TL1_SmartParameter<CT_FacilitySubType>& theFac1Type,
                             const TL1_SmartParameter<int>& theLacpPriority,
                             const TL1_SmartParameter<CT_TEL_LacpPartiMode>& theLacpPartiMode,
                             const TL1_SmartParameter<CT_TEL_LacpPortState>& theLacpPortState,
                             const TL1_SmartParameter<CT_SM_PST>&  thePST,
                             const TL1_SmartParameter<CT_SM_PSTQ>& thePSTQ,
                             const TL1_SmartParameter<CT_SM_SST>&  theSST) :
    myAid(theAid),
    myFac1Addr(theFac1Addr),
    myFac1Type(theFac1Type),
    myPST(thePST),
    myPSTQ(thePSTQ),
    mySST(theSST),
    myLacpPriority(theLacpPriority),
    myLacpPartiMode(theLacpPartiMode),
    myLacpPortState(theLacpPortState)
{
}

TL1_LagMemberRspBlk::TL1_LagMemberRspBlk(const TL1_LagMemberRspBlk& rspBlk) :
    myAid(rspBlk.myAid),
    myFac1Addr(rspBlk.myFac1Addr),
    myFac1Type(rspBlk.myFac1Type),
    myPST(rspBlk.myPST),
    myPSTQ(rspBlk.myPSTQ),
    mySST(rspBlk.mySST),
    myLacpPriority(rspBlk.myLacpPriority),
    myLacpPartiMode(rspBlk.myLacpPartiMode),
    myLacpPortState(rspBlk.myLacpPortState)
{
}

TL1_LagMemberRspBlk::~TL1_LagMemberRspBlk()
{
}

TL1_LagMemberRspBlk&TL1_LagMemberRspBlk::operator=( const TL1_LagMemberRspBlk& theBlock )
{
    myAid=             theBlock.myAid;
    myFac1Addr=        theBlock.myFac1Addr;
    myFac1Type=        theBlock.myFac1Type;
    myPST=             theBlock.myPST;
    myPSTQ=            theBlock.myPSTQ;
    mySST=             theBlock.mySST;
    myLacpPriority=    theBlock.myLacpPriority;
    myLacpPartiMode=   theBlock.myLacpPartiMode;
    myLacpPortState=   theBlock.myLacpPortState;

    return *this;
}

bool TL1_LagMemberRspBlk::operator==( const TL1_LagMemberRspBlk& theBlock ) const
{
    return ( myAid            == theBlock.myAid &&
             myFac1Addr        == theBlock.myFac1Addr &&
             myFac1Type        == theBlock.myFac1Type &&
             myPST             == theBlock.myPST &&
             myPSTQ            == theBlock.myPSTQ &&
             mySST             == theBlock.mySST &&
             myLacpPriority    == theBlock.myLacpPriority &&
             myLacpPartiMode   == theBlock.myLacpPartiMode &&
             myLacpPortState   == theBlock.myLacpPortState);
}
