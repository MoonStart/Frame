/*--------------------------------------------------------------.0---------------
   Copyright(c) Tellabs Transport Group Inc. All rights reserved.

SUBSYSTEM:
TARGET:
AUTHOR:         May 14, 2003- Automatically generated by DBCHG generator
DESCRIPTION:
-----------------------------------------------------------------------------*/

#include <Response/TL1_VcgRspBlk.h>
#include <CommonTypes/CT_ControlPlane_Definitions.h>



TL1_VcgRspBlk::TL1_VcgRspBlk() :
    //myAddr
    myCardType(CARD_TYPE_UNKNOWN),
    mySubCardType(UNKNOWN_SUB_CT),
    myIsAutoMode(false),
    myAlarmProfile(CT_UNKNOWN_PT),
    myVcatType(CT_TEL_TERMSIZE_STS1),
    myCCPath(XC_PATH_UNKNOWN),
    myPlcThr(0),
    myTlcThr(0),
    myHoTmr(false),
    myWtrTmr(false),
    //myAddTtp
    //myRmvTtp
    //myAddCrs
    //myRmvCrs
    myCct(XC_UNKNOWN_TYPE),
    myVcatXarCap(0),
    myLcasActive(false),
    myVcatDd(0),
    myVcatXar(0),
    myVcatXat(0),
    myNValue(0),
    myVcatXatCap(0),
    myNpOwner( CT_NP_TYPE_MCN ), // default to Mgmt Plane
    myTtpList(0),
    //VCG member part
    //myTtpAddr,
    myTtpFacType(XC_UNKNOWN),
    //myCrsAddr,
    myCrsFacType(XC_UNKNOWN),
    myMemberCct(XC_UNKNOWN_TYPE),
    myAutocfg(false),
    myMemberVcatDd(0),
    myActiveTransmit(false),
    myActiveReceive(false),
    mySequenceTransmit(0),
    mySequenceReceive(0),
    myConditionType( CT_UNKNOWN_COND_TYPE),
    //end of member part
    myPST(0),
    myPSTQ(0),
    mySST(0),
    myVlanTag(CT_TEL_VlanNone),
    myTagMode(false),
    myTpid(CT_TEL_Tpid_STagStd),
    myIsProtected(false),
    myLcasEnabled(false),
    myBitSet(INDEX_END, false)
{
}

TL1_VcgRspBlk::TL1_VcgRspBlk(const CT_TL1_FacAddr& theAddr,
                             const CT_SM_PST&  thePST,
                             const CT_SM_PSTQ& thePSTQ,
                             const CT_SM_SST&  theSST) :
    myAddr(theAddr),
    myCardType(CARD_TYPE_UNKNOWN),
    mySubCardType(UNKNOWN_SUB_CT),
    myPST(thePST),
    myPSTQ(thePSTQ),
    mySST(theSST),
    myIsAutoMode(false),
    myAlarmProfile(CT_UNKNOWN_PT),
    myVcatType(CT_TEL_TERMSIZE_STS1),
    myCCPath(XC_PATH_UNKNOWN),
    myPlcThr(0),
    myTlcThr(0),
    myHoTmr(false),
    myWtrTmr(false),
    //myAddTtp
    //myRmvTtp
    //myAddCrs
    //myRmvCrs
    myCct(XC_UNKNOWN_TYPE),
    myVcatXarCap(0),
    myLcasActive(false),
    myVcatDd(0),
    myVcatXar(0),
    myVcatXat(0),
    myNValue(0),
    myVcatXatCap(0),
    myNpOwner( CT_NP_TYPE_MCN ), // default to Mgmt Plane
    myTtpList(0),
    //VCG member part
    //myTtpAddr,
    myTtpFacType(XC_UNKNOWN),
    //myCrsAddr,
    myCrsFacType(XC_UNKNOWN),
    myMemberCct(XC_UNKNOWN_TYPE),
    myAutocfg(false),
    myMemberVcatDd(0),
    myActiveTransmit(false),
    myActiveReceive(false),
    mySequenceTransmit(0),
    mySequenceReceive(0),
    myConditionType(CT_UNKNOWN_COND_TYPE),
    //end of member part
    myVlanTag(CT_TEL_VlanNone),
    myTagMode(false),
    myTpid(CT_TEL_Tpid_STagStd),
    myIsProtected(false),
    myLcasEnabled(false),
    myBitSet(INDEX_END, false)
{
    myBitSet[INDEX_myAddr] = true;
    myBitSet[INDEX_PST] = true;
    myBitSet[INDEX_PSTQ] = true;
    myBitSet[INDEX_SST] = true;
}

//Constructor used by vcg members
TL1_VcgRspBlk::TL1_VcgRspBlk(const CT_TL1_FacAddr& theAddr,
                             const CT_TL1_FacAddr& theTtpAddr,
                             const CT_XcFacType&   theTtpFacType,
                             const CT_SM_PST&      thePST,
                             const CT_SM_PSTQ&     thePSTQ,
                             const CT_SM_SST&  theSST) :
    myAddr(theAddr),
    myCardType(CARD_TYPE_UNKNOWN),
    mySubCardType(UNKNOWN_SUB_CT),
    myPST(thePST),
    myPSTQ(thePSTQ),
    mySST(theSST),
    myIsAutoMode(false),
    myAlarmProfile(CT_UNKNOWN_PT),
    myVcatType(CT_TEL_TERMSIZE_STS1),
    myCCPath(XC_PATH_UNKNOWN),
    myPlcThr(0),
    myTlcThr(0),
    myHoTmr(false),
    myWtrTmr(false),
    //myAddTtp
    //myRmvTtp
    //myAddCrs
    //myRmvCrs
    myCct(XC_UNKNOWN_TYPE),
    myVcatXarCap(0),
    myLcasActive(false),
    myVcatDd(0),
    myVcatXar(0),
    myVcatXat(0),
    myNValue(0),
    myVcatXatCap(0),
    myNpOwner( CT_NP_TYPE_MCN ), // default to Mgmt Plane
    myTtpList(0),
    //VCG member part
    myTtpAddr(theTtpAddr),
    myTtpFacType(theTtpFacType),
    //myCrsAddr,
    myCrsFacType(XC_UNKNOWN),
    myMemberCct(XC_UNKNOWN_TYPE),
    myAutocfg(false),
    myMemberVcatDd(0),
    myActiveTransmit(false),
    myActiveReceive(false),
    mySequenceTransmit(0),
    mySequenceReceive(0),
    myConditionType(CT_UNKNOWN_COND_TYPE),
    //end of member part
    myVlanTag(CT_TEL_VlanNone),
    myTagMode(false),
    myTpid(CT_TEL_Tpid_STagStd),
    myIsProtected(false),
    myLcasEnabled(false),
    myBitSet(INDEX_END, false)
{
    myBitSet[INDEX_myAddr] = true;
    myBitSet[INDEX_myTtpAddr] = true;
    myBitSet[INDEX_myTtpFacType] = true;
    myBitSet[INDEX_PST] = true;
    myBitSet[INDEX_PSTQ] = true;
    myBitSet[INDEX_SST] = true;
}

 TL1_VcgRspBlk::TL1_VcgRspBlk(
        const CT_TL1_FacAddr& theAddr,
        bool vcgType,
        const CT_ProfileTableId* theAlarmProfile,
        CT_TEL_TermSize vcatType,
        CT_XcPath ccPath,
        uint32 thePlcThr,
        uint32 theTlcThr,
        bool theHoTmr,
        bool theWtrTmr,
        //CT_TL1_FacAddr rmvTtp,
        //CT_TL1_FacAddr deltaAddTtp,
        //CT_TL1_FacAddr deltaRmvTtp,
        //CT_TL1_FacAddr addCrs,
        //CT_TL1_FacAddr rmvCrs,
        CT_XcType theCct,
        int thevcatXarCap,
        bool theLcasActive,
        int thevcatDd,
        CT_TL1_FacAddr addTtp,
        int thevcatXar,
        int thevcatXat,
        int theNValue,
        int thevcatXatCap,
        CT_TL1_SlotAddr theVcgStat,
        int theNpOwner,
        list<int> ttpList,
        const CT_SM_PST&      thePST,
        const CT_SM_PSTQ&     thePSTQ,
        const CT_SM_SST&      theSST):
    myAddr(theAddr),
    myCardType(CARD_TYPE_UNKNOWN),
    mySubCardType(UNKNOWN_SUB_CT),
    myPST(thePST),
    myPSTQ(thePSTQ),
    mySST(theSST),
    myIsAutoMode(false),
    myAlarmProfile(CT_UNKNOWN_PT),
    myVcatType(CT_TEL_TERMSIZE_STS1),
    myCCPath(XC_PATH_UNKNOWN),
    myPlcThr(0),
    myTlcThr(0),
    myHoTmr(false),
    myWtrTmr(false),
    //myAddTtp
    //myRmvTtp
    //myAddCrs
    //myRmvCrs
    myCct(XC_UNKNOWN_TYPE),
    myVcatXarCap(0),
    myLcasActive(false),
    myVcatDd(0),
    myVcatXar(0),
    myVcatXat(0),
    myNValue(0),
    myVcatXatCap(0),
    myVcgStat(theVcgStat),
    myNpOwner( theNpOwner ),
    myTtpList(ttpList),
    //VCG member part
    //myTtpAddr,
    myTtpFacType(XC_UNKNOWN),
    //myCrsAddr,
    myCrsFacType(XC_UNKNOWN),
    myMemberCct(XC_UNKNOWN_TYPE),
    myAutocfg(false),
    myMemberVcatDd(0),
    myActiveTransmit(false),
    myActiveReceive(false),
    mySequenceTransmit(0),
    mySequenceReceive(0),
    myConditionType(CT_UNKNOWN_COND_TYPE),
    //end of member part
    myVlanTag(CT_TEL_VlanNone),
    myTagMode(false),
    myTpid(CT_TEL_Tpid_STagStd),
    myIsProtected(false),
    myLcasEnabled(false),
    myBitSet(INDEX_END, false)
{
        myBitSet[INDEX_EntityName] = true;
        myBitSet[INDEX_myAddr] = true;
        myBitSet[INDEX_myIsAutoMode] = true;
        myBitSet[INDEX_myAlarmProfile] = true;
        myBitSet[INDEX_myVcatType] = true;
        myBitSet[INDEX_myCCPath] = true;
        myBitSet[INDEX_myPlcThr] = true;
        myBitSet[INDEX_myTlcThr] = true;
        myBitSet[INDEX_myHoTmr] = true;
        myBitSet[INDEX_myWtrTmr] = true;
        //myBitSet[INDEX_myAddTtp] = true;
        //myBitSet[INDEX_myRmvTtp] = true;
        //myBitSet[INDEX_myAddCrs] = true;
        //myBitSet[INDEX_myRmvCrs] = true;
        myBitSet[INDEX_myCct] = true,
        myBitSet[INDEX_myVcatXarCap] = true;
        myBitSet[INDEX_myLcasActive] = true;
        myBitSet[INDEX_myVcatDd] = true;
        myBitSet[INDEX_myVcatXar] = true;
        myBitSet[INDEX_myVcatXat] = true;
        myBitSet[INDEX_myNValue] = true;
        myBitSet[INDEX_myVcatXatCap] = true;
        myBitSet[INDEX_myVcgStat] = true;
        myBitSet[INDEX_myNpOwner] = true;
        myBitSet[INDEX_myTtpList] = true;
        myBitSet[INDEX_VlanTag] = true;
        myBitSet[INDEX_TagMode] = true;
        myBitSet[INDEX_Tpid] = true;
        myBitSet[INDEX_PST] = true;
        myBitSet[INDEX_PSTQ] = true;
        myBitSet[INDEX_SST] = true;

}


TL1_VcgRspBlk::TL1_VcgRspBlk(const TL1_VcgRspBlk& rspBlk) :
    myBitSet(INDEX_END, false)
{
    myBitSet = rspBlk.myBitSet;
    myAddr = rspBlk.myAddr;
    myCardType = rspBlk.myCardType;
    mySubCardType = rspBlk.mySubCardType;
    myIsAutoMode = rspBlk.myIsAutoMode;
    myAlarmProfile = rspBlk.myAlarmProfile;
    myVcatType = rspBlk.myVcatType;
    myCCPath = rspBlk.myCCPath;
    myPlcThr = rspBlk.myPlcThr;
    myTlcThr = rspBlk.myTlcThr;
    myHoTmr = rspBlk.myHoTmr;
    myWtrTmr = rspBlk.myWtrTmr;
    myAddTtp = rspBlk.myAddTtp;
    myRmvTtp = rspBlk.myRmvTtp;
    myAddCrs = rspBlk.myAddCrs;
    myRmvCrs = rspBlk.myRmvCrs;
    myCct = rspBlk.myCct;
    myVcatXarCap = rspBlk.myVcatXarCap;
    myLcasActive = rspBlk.myLcasActive;
    myVcatDd = rspBlk.myVcatDd;
    myVcatXar = rspBlk.myVcatXar;
    myVcatXat = rspBlk.myVcatXat;
    myNValue = rspBlk.myNValue;
    myVcatXatCap = rspBlk.myVcatXatCap;
    myVcgStat = rspBlk.myVcgStat;
    myNpOwner = rspBlk.myNpOwner;
    myTtpList = rspBlk.myTtpList;
    myAddTtpList = rspBlk.myAddTtpList;
    myRmvTtpList = rspBlk.myRmvTtpList;
    //vcg member part
    myTtpAddr = rspBlk.myTtpAddr;
    myTtpFacType = rspBlk.myTtpFacType;
    myCrsAddr = rspBlk.myCrsAddr;
    myCrsFacType = rspBlk.myCrsFacType;
    myMemberCct = rspBlk.myMemberCct;
    myAutocfg = rspBlk.myAutocfg;
    myMemberVcatDd = rspBlk.myMemberVcatDd;
    myActiveTransmit = rspBlk.myActiveTransmit;
    myActiveReceive = rspBlk.myActiveReceive;
    mySequenceTransmit = rspBlk.mySequenceTransmit;
    mySequenceReceive = rspBlk.mySequenceReceive;
    myConditionType = rspBlk.myConditionType;
    //end of member part
    myVlanTag = rspBlk.myVlanTag;
    myTagMode = rspBlk.myTagMode;
    myTpid = rspBlk.myTpid;
    myIsProtected = rspBlk.myIsProtected;
    myLcasEnabled = rspBlk.myLcasEnabled;
    myPST = rspBlk.myPST;
    myPSTQ = rspBlk.myPSTQ;
    mySST = rspBlk.mySST;
}

TL1_VcgRspBlk::~TL1_VcgRspBlk()
{
}

TL1_VcgRspBlk& TL1_VcgRspBlk::operator=( const TL1_VcgRspBlk& rspBlk )
{
    myBitSet = rspBlk.myBitSet;
    myAddr = rspBlk.myAddr;
    myCardType = rspBlk.myCardType;
    mySubCardType = rspBlk.mySubCardType;
    myIsAutoMode = rspBlk.myIsAutoMode;
    myAlarmProfile = rspBlk.myAlarmProfile;
    myVcatType = rspBlk.myVcatType;
    myCCPath = rspBlk.myCCPath;
    myPlcThr = rspBlk.myPlcThr;
    myTlcThr = rspBlk.myTlcThr;
    myHoTmr = rspBlk.myHoTmr;
    myWtrTmr = rspBlk.myWtrTmr;
    myAddTtp = rspBlk.myAddTtp;
    myRmvTtp = rspBlk.myRmvTtp;
    myAddCrs = rspBlk.myAddCrs;
    myRmvCrs = rspBlk.myRmvCrs;
    myCct = rspBlk.myCct;
    myVcatXarCap = rspBlk.myVcatXarCap;
    myLcasActive = rspBlk.myLcasActive;
    myVcatDd = rspBlk.myVcatDd;
    myVcatXar = rspBlk.myVcatXar;
    myVcatXat = rspBlk.myVcatXat;
    myNValue = rspBlk.myNValue;
    myVcatXatCap = rspBlk.myVcatXatCap;
    myVcgStat = rspBlk.myVcgStat;
    myNpOwner = rspBlk.myNpOwner;
    myTtpList = rspBlk.myTtpList;
    myAddTtpList = rspBlk.myAddTtpList;
    myRmvTtpList = rspBlk.myRmvTtpList;
    //vcg member part
    myTtpAddr = rspBlk.myTtpAddr;
    myTtpFacType = rspBlk.myTtpFacType;
    myCrsAddr = rspBlk.myCrsAddr;
    myCrsFacType = rspBlk.myCrsFacType;
    myMemberCct = rspBlk.myMemberCct;
    myAutocfg = rspBlk.myAutocfg;
    myMemberVcatDd = rspBlk.myMemberVcatDd;
    myActiveTransmit = rspBlk.myActiveTransmit;
    myActiveReceive = rspBlk.myActiveReceive;
    mySequenceTransmit = rspBlk.mySequenceTransmit;
    mySequenceReceive = rspBlk.mySequenceReceive;
    myVlanTag = rspBlk.myVlanTag;
    myTagMode = rspBlk.myTagMode;
    myConditionType = rspBlk.myConditionType;
    //end of member part
    myTpid = rspBlk.myTpid;
    myIsProtected = rspBlk.myIsProtected;
    myLcasEnabled = rspBlk.myLcasEnabled;
    myPST = rspBlk.myPST;
    myPSTQ = rspBlk.myPSTQ;
    mySST = rspBlk.mySST;
    return *this;
}

bool TL1_VcgRspBlk::operator==( const TL1_VcgRspBlk& rspBlk ) const
{
    return (     myBitSet == rspBlk.myBitSet &&
                 myAddr == rspBlk.myAddr &&
                 myCardType == rspBlk.myCardType &&
                 mySubCardType == rspBlk.mySubCardType &&
                 myIsAutoMode == rspBlk.myIsAutoMode &&
                 myAlarmProfile == rspBlk.myAlarmProfile &&
                 myVcatType == rspBlk.myVcatType &&
                 myCCPath == rspBlk.myCCPath &&
                 myPlcThr == rspBlk.myPlcThr &&
                 myTlcThr == rspBlk.myTlcThr &&
                 myHoTmr == rspBlk.myHoTmr &&
                 myWtrTmr == rspBlk.myWtrTmr &&
                 myAddTtp == rspBlk.myAddTtp &&
                 myRmvTtp == rspBlk.myRmvTtp &&
                 myAddCrs == rspBlk.myAddCrs &&
                 myRmvCrs == rspBlk.myRmvCrs &&
                 myCct == rspBlk.myCct &&
                 myVcatXarCap == rspBlk.myVcatXarCap &&
                 myLcasActive == rspBlk.myLcasActive &&
                 myVcatDd == rspBlk.myVcatDd &&
                 myVcatXar == rspBlk.myVcatXar &&
                 myVcatXat == rspBlk.myVcatXat &&
                 myNValue == rspBlk.myNValue &&
                 myVcatXatCap == rspBlk.myVcatXatCap &&
                 myVcgStat == rspBlk.myVcgStat &&
                 myNpOwner == rspBlk.myNpOwner &&
                 myTtpList == rspBlk.myTtpList &&
                 myAddTtpList == rspBlk.myAddTtpList &&
                 myRmvTtpList == rspBlk.myRmvTtpList &&
                 //vcg member part
                 myTtpAddr == rspBlk.myTtpAddr &&
                 myTtpFacType == rspBlk.myTtpFacType &&
                 myCrsAddr == rspBlk.myCrsAddr &&
                 myCrsFacType == rspBlk.myCrsFacType &&
                 myMemberCct == rspBlk.myMemberCct &&
                 myAutocfg == rspBlk.myAutocfg &&
                 myMemberVcatDd == rspBlk.myMemberVcatDd &&
                 myActiveTransmit == rspBlk.myActiveTransmit &&
                 myActiveReceive == rspBlk.myActiveReceive &&
                 mySequenceTransmit == rspBlk.mySequenceTransmit &&
                 mySequenceReceive == rspBlk.mySequenceReceive &&
                 myConditionType == rspBlk.myConditionType &&
                 //end of member part
                 myVlanTag == rspBlk.myVlanTag &&
                 myTagMode == rspBlk.myTagMode &&
                 myTpid == rspBlk.myTpid &&
                 myIsProtected == rspBlk.myIsProtected &&
                 myLcasEnabled == rspBlk.myLcasEnabled &&
                 myPST == rspBlk.myPST &&
                 myPSTQ == rspBlk.myPSTQ &&
                 mySST == rspBlk.mySST  );
}


bool TL1_VcgRspBlk::GetAddr(CT_TL1_FacAddr& theAddr) const
{
    if (true == myBitSet[INDEX_myAddr])
    {
        theAddr = myAddr;
        return true;
    }
    else
    {
        return false;
    }
}

bool TL1_VcgRspBlk::GetCardType(CT_CardType& theCardType ) const
{
    if( true == myBitSet[ INDEX_myCardType ] )
    {
        theCardType = myCardType;
        return true;
    }
    else
    {
        return false;
    }
}

bool TL1_VcgRspBlk::GetSubCardType(CT_SubCardType& theSubCardType ) const
{
    if( true == myBitSet[ INDEX_mySubCardType ] )
    {
        theSubCardType = mySubCardType;
        return true;
    }
    else
    {
        return false;
    }
}

bool TL1_VcgRspBlk::GetIsAutoMode(bool& theIsAutoMode) const
{
    if (true == myBitSet[INDEX_myIsAutoMode])
    {
        theIsAutoMode = myIsAutoMode;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetAlarmProfile(CT_ProfileTableId& theAlarmProfile) const
{
    if (true == myBitSet[INDEX_myAlarmProfile])
    {
        theAlarmProfile = myAlarmProfile;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetVcatType(CT_TEL_TermSize& theVcatType) const
{
    if (true == myBitSet[INDEX_myVcatType])
    {
        theVcatType = myVcatType;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetCCPath(CT_XcPath& theCCPath) const
{
    if (true == myBitSet[INDEX_myCCPath])
    {
        theCCPath = myCCPath;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetPlcThr(uint32& thePlcThr) const
{
    if (true == myBitSet[INDEX_myPlcThr])
    {
        thePlcThr = myPlcThr;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetTlcThr(uint32& theTlcThr) const
{
    if (true == myBitSet[INDEX_myTlcThr])
    {
        theTlcThr = myTlcThr;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetHoTmr(bool& theHoTmr) const
{
    if (true == myBitSet[INDEX_myHoTmr])
    {
        theHoTmr = myHoTmr;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetWtrTmr(bool& theWtrTmr) const
{
    if (true == myBitSet[INDEX_myWtrTmr])
    {
        theWtrTmr = myWtrTmr;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetAddTtp(CT_TL1_FacAddr& theAddTtp) const
{
    if (true == myBitSet[INDEX_myAddTtp])
    {
        theAddTtp = myAddTtp;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetRmvTtp(CT_TL1_FacAddr& theRmvTtp) const
{
    if (true == myBitSet[INDEX_myRmvTtp])
    {
        theRmvTtp = myRmvTtp;
        return true;
    }
    else
    {
        return false;
    }
}

bool TL1_VcgRspBlk::GetAddCrs(CT_TL1_FacAddr& theAddCrs) const
{
    if (true == myBitSet[INDEX_myAddCrs])
    {
        theAddCrs = myAddCrs;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetRmvCrs(CT_TL1_FacAddr& theRmvCrs) const
{
    if (true == myBitSet[INDEX_myRmvCrs])
    {
        theRmvCrs = myRmvCrs;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetCct(CT_XcType& theCct) const
{
    if (true == myBitSet[INDEX_myCct])
    {
        theCct = myCct;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetVcatXarCap(int& theVcatXarCap) const
{
    if (true == myBitSet[INDEX_myVcatXarCap])
    {
        theVcatXarCap = myVcatXarCap;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetLcasActive(bool & theLcasActive) const
{
    if (true == myBitSet[INDEX_myLcasActive])
    {
        theLcasActive = myLcasActive;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetVcatDd(int& theVcatDd) const
{
    if (true == myBitSet[INDEX_myVcatDd])
    {
        theVcatDd = myVcatDd;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetVcatXar(int& theVcatXar) const
{
    if (true == myBitSet[INDEX_myVcatXar])
    {
        theVcatXar = myVcatXar;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetVcatXat(int& theVcatXat) const
{
    if (true == myBitSet[INDEX_myVcatXat])
    {
        theVcatXat = myVcatXat;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetNValue(int& theNValue) const
{
    if (true == myBitSet[INDEX_myNValue])
    {
        theNValue = myNValue;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetVcatXatCap(int& theVcatXatCap) const
{
    if (true == myBitSet[INDEX_myVcatXatCap])
    {
        theVcatXatCap = myVcatXatCap;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetVcgStat(CT_TL1_SlotAddr& theVcgStat) const
{
    if (true == myBitSet[INDEX_myVcgStat])
    {
        theVcgStat = myVcgStat;
        return true;
    }
    else
    {
        return false;
    }
}

bool TL1_VcgRspBlk::GetNpOwner( int& theNpOwner ) const
{
    if (true == myBitSet[INDEX_myNpOwner])
    {
        theNpOwner = myNpOwner;
        return true;
    }
    else
    {
        return false;
    }
}

bool TL1_VcgRspBlk::GetTtpList(list<int>& theTtpList) const
{
    if (true == myBitSet[INDEX_myTtpList])
    {
        theTtpList = myTtpList;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetAddTtpList(list<int>& theTtpList) const
{
    if (true == myBitSet[INDEX_myAddTtpList])
    {
        theTtpList = myAddTtpList;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetRmvTtpList(list<int>& theTtpList) const
{
    if (true == myBitSet[INDEX_myRmvTtpList])
    {
        theTtpList = myRmvTtpList;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetPST(CT_SM_PST& thePst) const
{
    if (true == myBitSet[INDEX_PST])
    {
        thePst = myPST;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetPSTQ(CT_SM_PSTQ& thePstq) const
{
    if (true == myBitSet[INDEX_PSTQ])
    {
        thePstq = myPSTQ;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetSST(CT_SM_SST& theSst) const
{
    if (true == myBitSet[INDEX_SST])
    {
        theSst = mySST;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetVlanTag(CT_TEL_VlanTag& theVTag ) const
{
    if( true == myBitSet[ INDEX_VlanTag ] )
    {
        theVTag = myVlanTag;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetTagMode(bool& theTagMode ) const
{
    if( true == myBitSet[ INDEX_TagMode ] )
    {
        theTagMode = myTagMode;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetTpid(CT_TEL_Tpid& theTpid ) const
{
    if( true == myBitSet[ INDEX_Tpid ] )
    {
        theTpid = myTpid;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetProt(bool& theProt ) const
{
    if( true == myBitSet[ INDEX_myIsProtected ] )
    {
        theProt = myIsProtected;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetLcasEnabled(bool& theLcas ) const
{
    if( true == myBitSet[ INDEX_myLcasEnabled ] )
    {
        theLcas = myLcasEnabled;
        return true;
    }
    else
    {
        return false;
    }
}

// vcg member part
bool TL1_VcgRspBlk::GetTtpAddr(CT_TL1_FacAddr& theTtpAddr) const
{
    if (true == myBitSet[INDEX_myTtpAddr])
    {
        theTtpAddr = myTtpAddr;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetTtpFacType(CT_XcFacType& theTtpFacType) const
{
    if (true == myBitSet[INDEX_myTtpFacType])
    {
        theTtpFacType = myTtpFacType;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetCrsAddr(CT_TL1_FacAddr& theCrsAddr) const
{
    if (true == myBitSet[INDEX_myCrsAddr])
    {
        theCrsAddr = myCrsAddr;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetCrsFacType(CT_XcFacType& theCrsFacType) const
{
    if (true == myBitSet[INDEX_myCrsFacType])
    {
        theCrsFacType = myCrsFacType;
        return true;
    }
    else
    {
        return false;
    }
}

bool TL1_VcgRspBlk::GetMemberCct(CT_XcType& theMemberCct) const
{
    if (true == myBitSet[INDEX_myMemberCct])
    {
        theMemberCct = myMemberCct;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetAutocfg(bool& theAutocfg) const
{
    if (true == myBitSet[INDEX_myAutocfg])
    {
        theAutocfg = myAutocfg;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetMemberVcatDd(int& theMemberVcatDd) const
{
    if (true == myBitSet[INDEX_myMemberVcatDd])
    {
        theMemberVcatDd = myMemberVcatDd;
        return true;
    }
    else
    {
        return false;
    }
}

bool TL1_VcgRspBlk::GetSequenceReceive(int& theSequenceReceive) const
{
    if (true == myBitSet[INDEX_mySequenceReceive])
    {
        theSequenceReceive = mySequenceReceive;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetSequenceTransmit(int& theSequenceTransmit) const
{
    if (true == myBitSet[INDEX_mySequenceTransmit])
    {
        theSequenceTransmit = mySequenceTransmit;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetActiveReceive(bool& theActiveReceive) const
{
    if (true == myBitSet[INDEX_myActiveReceive])
    {
        theActiveReceive = myActiveReceive;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetActiveTransmit(bool& theActiveTransmit) const
{
    if (true == myBitSet[INDEX_myActiveTransmit])
    {
        theActiveTransmit = myActiveTransmit;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgRspBlk::GetCondition(CT_ConditionType& theCond) const
{
    if (true == myBitSet[INDEX_myConditionType])
    {
        theCond = myConditionType;
        return true;
    }
    else
    {
        return false;
    }
}

//end of member part
//--------------------------------------------------------
//Set members
void TL1_VcgRspBlk::SetAddr(const CT_TL1_FacAddr& theInput)
{
    myBitSet[ INDEX_myAddr ] = true;
    myAddr = theInput;
}
void TL1_VcgRspBlk::SetIsAutoMode(const bool& theInput)
{
    myBitSet[ INDEX_myIsAutoMode ] = true;
    myIsAutoMode = theInput;
}
void TL1_VcgRspBlk::SetAlarmProfile(const CT_ProfileTableId& theInput)
{
    myBitSet[ INDEX_myAlarmProfile ] = true;
    myAlarmProfile = theInput;
}
void TL1_VcgRspBlk::SetVcatType(const CT_TEL_TermSize& theInput)
{
    myBitSet[ INDEX_myVcatType ] = true;
    myVcatType = theInput;
}
void TL1_VcgRspBlk::SetCCPath(const CT_XcPath& theInput)
{
    myBitSet[ INDEX_myCCPath ] = true;
    myCCPath = theInput;
}
void TL1_VcgRspBlk::SetPlcThr(const uint32& theInput)
{
    myBitSet[ INDEX_myPlcThr ] = true;
    myPlcThr = theInput;
}
void TL1_VcgRspBlk::SetTlcThr(const uint32& theInput)
{
    myBitSet[ INDEX_myTlcThr ] = true;
    myTlcThr = theInput;
}
void TL1_VcgRspBlk::SetHoTmr(const bool& theInput)
{
    myBitSet[ INDEX_myHoTmr ] = true;
    myHoTmr = theInput;
}
void TL1_VcgRspBlk::SetWtrTmr(const bool& theInput)
{
    myBitSet[ INDEX_myWtrTmr ] = true;
    myWtrTmr = theInput;
}
void TL1_VcgRspBlk::SetAddTtp(const CT_TL1_FacAddr& addAddr, const CT_XcFacType&  theInput)
{
    myBitSet[ INDEX_myAddTtp ] = true;
    myBitSet[ INDEX_myTtpFacType ] = true;
    myAddTtp = addAddr;
    myTtpFacType = theInput;
}
void TL1_VcgRspBlk::SetRmvTtp(const CT_TL1_FacAddr& rmvAddr, const CT_XcFacType&  theInput)
{
    myBitSet[ INDEX_myRmvTtp ] = true;
    myBitSet[ INDEX_myTtpFacType ] = true;
    myRmvTtp = rmvAddr;
    myTtpFacType = theInput;
}
void TL1_VcgRspBlk::SetAddCrs(const CT_TL1_FacAddr& theAddCrs, const CT_XcFacType&  theInput)
{
    myBitSet[ INDEX_myAddCrs ] = true;
    myBitSet[ INDEX_myCrsFacType ] = true;
    myAddCrs = theAddCrs;
    myCrsFacType = theInput;
}
void TL1_VcgRspBlk::SetRmvCrs(const CT_TL1_FacAddr& theRmvCrs, const CT_XcFacType&  theInput)
{
    myBitSet[ INDEX_myRmvCrs ] = true;
    myBitSet[ INDEX_myCrsFacType ] = true;
    myRmvCrs = theRmvCrs;
    myCrsFacType = theInput;
}
void TL1_VcgRspBlk::SetCct(const CT_XcType& theInput)
{
    myBitSet[ INDEX_myCct ] = true;
    myCct = theInput;
}
void TL1_VcgRspBlk::SetVcatXarCap(const int& theInput)
{
    myBitSet[ INDEX_myVcatXarCap ] = true;
    myVcatXarCap = theInput;
}
void TL1_VcgRspBlk::SetLcasActive(const bool& theInput)
{
    myBitSet[ INDEX_myLcasActive ] = true;
    myLcasActive = theInput;
}
void TL1_VcgRspBlk::SetVcatDd(const int& theInput)
{
    myBitSet[ INDEX_myVcatDd ] = true;
    myVcatDd = theInput;
}
void TL1_VcgRspBlk::SetVcatXar(const int& theInput)
{
    myBitSet[ INDEX_myVcatXar ] = true;
    myVcatXar = theInput;
}
void TL1_VcgRspBlk::SetVcatXat(const int& theInput)
{
    myBitSet[ INDEX_myVcatXat ] = true;
    myVcatXat = theInput;
}
void TL1_VcgRspBlk::SetNValue(const int& theInput)
{
    myBitSet[ INDEX_myNValue ] = true;
    myNValue = theInput;
}
void TL1_VcgRspBlk::SetVcatXatCap(const int& theInput)
{
    myBitSet[ INDEX_myVcatXatCap ] = true;
    myVcatXatCap = theInput;
}
void TL1_VcgRspBlk::SetVcgStat(const CT_TL1_SlotAddr& theInput)
{
    myBitSet[ INDEX_myVcgStat ] = true;
    myVcgStat = theInput;
}

void TL1_VcgRspBlk::SetNpOwner(const int& theNpOwner)
{
    myBitSet[ INDEX_myNpOwner ] = true;
    myNpOwner = theNpOwner;
}

void TL1_VcgRspBlk::SetTtpList(const list<int>& theInput)
{
    myBitSet[ INDEX_myTtpList ] = true;
    myTtpList = theInput;
}
void TL1_VcgRspBlk::SetAddTtpList(const list<int>& theInput)
{
    myBitSet[ INDEX_myAddTtpList ] = true;
    myAddTtpList = theInput;
}
void TL1_VcgRspBlk::SetRmvTtpList(const list<int>& theInput)
{
    myBitSet[ INDEX_myRmvTtpList ] = true;
    myRmvTtpList = theInput;
}
void TL1_VcgRspBlk::SetPST(const CT_SM_PST& theInput)
{
    myBitSet[ INDEX_PST ] = true;
    myPST = theInput;
}
void TL1_VcgRspBlk::SetPSTQ(const CT_SM_PSTQ& theInput)
{
    myBitSet[ INDEX_PSTQ ] = true;
    myPSTQ = theInput;
}
void TL1_VcgRspBlk::SetSST(const CT_SM_SST& theInput)
{
    myBitSet[ INDEX_SST ] = true;
    mySST = theInput;
}
void TL1_VcgRspBlk::SetVlanTag(const CT_TEL_VlanTag& theVTag )
{
    myBitSet[ INDEX_VlanTag ] = true;
    myVlanTag = theVTag;
}
void TL1_VcgRspBlk::SetTagMode(const bool& theTagMode )
{
    myBitSet[ INDEX_TagMode ] = true;
    myTagMode = theTagMode;
}
void TL1_VcgRspBlk::SetTpid(const CT_TEL_Tpid& theTpid )
{
    myBitSet[ INDEX_Tpid ] = true;
    myTpid = theTpid;
}
void TL1_VcgRspBlk::SetProt(const bool& theProt )
{
    myBitSet[ INDEX_myIsProtected ] = true;
    myIsProtected = theProt;
}
void TL1_VcgRspBlk::SetLcasEnabled(const bool& theLcas )
{
    myBitSet[ INDEX_myLcasEnabled ] = true;
    myLcasEnabled = theLcas;
}


//vcg member part
void TL1_VcgRspBlk::SetTtpAddr(const CT_TL1_FacAddr& TtpAddr, const CT_XcFacType&  theInput)
{
    myBitSet[ INDEX_myTtpAddr ] = true;
    myBitSet[ INDEX_myTtpFacType ] = true;
    myTtpAddr = TtpAddr;
    myTtpFacType = theInput;
}

void TL1_VcgRspBlk::SetCrsAddr(const CT_TL1_FacAddr& crsAddr, const CT_XcFacType&  theInput)
{
    myBitSet[ INDEX_myCrsAddr ] = true;
    myBitSet[ INDEX_myCrsFacType ] = true;
    myCrsAddr = crsAddr;
    myCrsFacType = theInput;
}

void TL1_VcgRspBlk::SetMemberCct(const CT_XcType& theInput)
{
    myBitSet[ INDEX_myMemberCct ] = true;
    myMemberCct = theInput;
}
void TL1_VcgRspBlk::SetAutocfg(const bool& theInput)
{
    myBitSet[ INDEX_myAutocfg ] = true;
    myAutocfg = theInput;
}
void TL1_VcgRspBlk::SetMemberVcatDd(const int& theInput)
{
    myBitSet[ INDEX_myMemberVcatDd ] = true;
    myMemberVcatDd = theInput;
}
void TL1_VcgRspBlk::SetActiveTransmit(const bool& theInput)
{
    myBitSet[ INDEX_myActiveTransmit ] = true;
    myActiveTransmit = theInput;
}
void TL1_VcgRspBlk::SetActiveReceive(const bool& theInput)
{
    myBitSet[ INDEX_myActiveReceive ] = true;
    myActiveReceive = theInput;
}
void TL1_VcgRspBlk::SetSequenceTransmit(const int& theInput)
{
    myBitSet[ INDEX_mySequenceTransmit ] = true;
    mySequenceTransmit = theInput;
}
void TL1_VcgRspBlk::SetSequenceReceive(const int& theInput)
{
    myBitSet[ INDEX_mySequenceReceive ] = true;
    mySequenceReceive = theInput;
}
void TL1_VcgRspBlk::SetCondition(const CT_ConditionType& theCond)
{
    myBitSet[ INDEX_myConditionType ] = true;
    myConditionType = theCond;
}
//end of member part

//------------------------------------------------------------
//
TL1_VcgMemberRspBlk::TL1_VcgMemberRspBlk() :
    //myAddr
    //myMemberAddr
    myMemberFacType(XC_UNKNOWN),
    //myCrsAddr
    myCrsFacType(XC_UNKNOWN),
    myCct(XC_UNKNOWN_TYPE),
    myAutocfg(false),
    myVcatDd(0),
    myActiveTransmit(false),
    myActiveReceive(false),
    mySequenceTransmit(0),
    mySequenceReceive(0),
    myConditionType(CT_UNKNOWN_COND_TYPE),
    myPST(0),
    myPSTQ(0),
    mySST(0),
    myBitSet(INDEX_END, false)
{
}

TL1_VcgMemberRspBlk::TL1_VcgMemberRspBlk(const CT_TL1_FacAddr& theAddr,
                             const CT_TL1_FacAddr& theMemberAddr,
                             const CT_XcFacType&   theMemberType,
                             const CT_SM_PST&      thePST,
                             const CT_SM_PSTQ&     thePSTQ,
                             const CT_SM_SST&  theSST) :
    myAddr(theAddr),
    myMemberAddr(theMemberAddr),
    myMemberFacType(theMemberType),
    //myCrsAddr
    myCrsFacType(XC_UNKNOWN),
    myPST(thePST),
    myPSTQ(thePSTQ),
    mySST(theSST),
    myCct(XC_UNKNOWN_TYPE),
    myAutocfg(false),
    myVcatDd(0),
    myActiveTransmit(false),
    myActiveReceive(false),
    mySequenceTransmit(0),
    mySequenceReceive(0),
    myConditionType(CT_UNKNOWN_COND_TYPE),
    myBitSet(INDEX_END, false)
{
    myBitSet[INDEX_myAddr] = true;
    myBitSet[INDEX_myMemberAddr] = true;
    myBitSet[INDEX_myMemberFacType] = true;
    myBitSet[INDEX_PST] = true;
    myBitSet[INDEX_PSTQ] = true;
    myBitSet[INDEX_SST] = true;
}

TL1_VcgMemberRspBlk::TL1_VcgMemberRspBlk(const TL1_VcgMemberRspBlk& rspBlk) :
    myBitSet(INDEX_END, false)
{
    myBitSet = rspBlk.myBitSet;
    myAddr = rspBlk.myAddr;
    myMemberAddr = rspBlk.myMemberAddr;
    myMemberFacType = rspBlk.myMemberFacType;
    myCrsAddr = rspBlk.myCrsAddr;
    myCrsFacType = rspBlk.myCrsFacType;
    myCct = rspBlk.myCct;
    myAutocfg = rspBlk.myAutocfg;
    myVcatDd = rspBlk.myVcatDd;
    myActiveTransmit = rspBlk.myActiveTransmit;
    myActiveReceive = rspBlk.myActiveReceive;
    mySequenceTransmit = rspBlk.mySequenceTransmit;
    mySequenceReceive = rspBlk.mySequenceReceive;
    myConditionType = rspBlk.myConditionType;
    myPST = rspBlk.myPST;
    myPSTQ = rspBlk.myPSTQ;
    mySST = rspBlk.mySST;
}

TL1_VcgMemberRspBlk::~TL1_VcgMemberRspBlk()
{
}

TL1_VcgMemberRspBlk& TL1_VcgMemberRspBlk::operator=( const TL1_VcgMemberRspBlk& rspBlk )
{
    myBitSet = rspBlk.myBitSet;
    myAddr = rspBlk.myAddr;
    myMemberAddr = rspBlk.myMemberAddr;
    myMemberFacType = rspBlk.myMemberFacType;
    myCrsAddr = rspBlk.myCrsAddr;
    myCrsFacType = rspBlk.myCrsFacType;
    myCct = rspBlk.myCct;
    myAutocfg = rspBlk.myAutocfg;
    myVcatDd = rspBlk.myVcatDd;
    myActiveTransmit = rspBlk.myActiveTransmit;
    myActiveReceive = rspBlk.myActiveReceive;
    mySequenceTransmit = rspBlk.mySequenceTransmit;
    mySequenceReceive = rspBlk.mySequenceReceive;
    myConditionType = rspBlk.myConditionType;
    myPST = rspBlk.myPST;
    myPSTQ = rspBlk.myPSTQ;
    mySST = rspBlk.mySST;
    return *this;
}

bool TL1_VcgMemberRspBlk::operator==( const TL1_VcgMemberRspBlk& rspBlk ) const
{
    return (     myBitSet == rspBlk.myBitSet &&
                 myAddr == rspBlk.myAddr &&
                 myMemberAddr == rspBlk.myMemberAddr &&
                 myMemberFacType == rspBlk.myMemberFacType &&
                 myCrsAddr == rspBlk.myCrsAddr &&
                 myCrsFacType == rspBlk.myCrsFacType &&
                 myCct == rspBlk.myCct &&
                 myAutocfg == rspBlk.myAutocfg &&
                 myVcatDd == rspBlk.myVcatDd &&
                 myActiveTransmit == rspBlk.myActiveTransmit &&
                 myActiveReceive == rspBlk.myActiveReceive &&
                 mySequenceTransmit == rspBlk.mySequenceTransmit &&
                 mySequenceReceive == rspBlk.mySequenceReceive &&
                 myConditionType == rspBlk.myConditionType &&
                 myPST == rspBlk.myPST &&
                 myPSTQ == rspBlk.myPSTQ &&
                 mySST == rspBlk.mySST  );
}


bool TL1_VcgMemberRspBlk::GetAddr(CT_TL1_FacAddr& theAddr) const
{
    if (true == myBitSet[INDEX_myAddr])
    {
        theAddr = myAddr;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgMemberRspBlk::GetMemberAddr(CT_TL1_FacAddr& theMemberAddr) const
{
    if (true == myBitSet[INDEX_myMemberAddr])
    {
        theMemberAddr = myMemberAddr;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgMemberRspBlk::GetMemberFacType(CT_XcFacType& theMemberFacType) const
{
    if (true == myBitSet[INDEX_myMemberFacType])
    {
        theMemberFacType = myMemberFacType;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgMemberRspBlk::GetCrsAddr(CT_TL1_FacAddr& theCrsAddr) const
{
    if (true == myBitSet[INDEX_myCrsAddr])
    {
        theCrsAddr = myCrsAddr;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgMemberRspBlk::GetCrsFacType(CT_XcFacType& theCrsFacType) const
{
    if (true == myBitSet[INDEX_myCrsFacType])
    {
        theCrsFacType = myCrsFacType;
        return true;
    }
    else
    {
        return false;
    }
}

bool TL1_VcgMemberRspBlk::GetCct(CT_XcType& theCct) const
{
    if (true == myBitSet[INDEX_myCct])
    {
        theCct = myCct;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgMemberRspBlk::GetAutocfg(bool& theAutocfg) const
{
    if (true == myBitSet[INDEX_myAutocfg])
    {
        theAutocfg = myAutocfg;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgMemberRspBlk::GetVcatDd(int& theVcatDd) const
{
    if (true == myBitSet[INDEX_myVcatDd])
    {
        theVcatDd = myVcatDd;
        return true;
    }
    else
    {
        return false;
    }
}

bool TL1_VcgMemberRspBlk::GetSequenceReceive(int& theSequenceReceive) const
{
    if (true == myBitSet[INDEX_mySequenceReceive])
    {
        theSequenceReceive = mySequenceReceive;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgMemberRspBlk::GetSequenceTransmit(int& theSequenceTransmit) const
{
    if (true == myBitSet[INDEX_mySequenceTransmit])
    {
        theSequenceTransmit = mySequenceTransmit;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgMemberRspBlk::GetActiveReceive(bool& theActiveReceive) const
{
    if (true == myBitSet[INDEX_myActiveReceive])
    {
        theActiveReceive = myActiveReceive;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgMemberRspBlk::GetActiveTransmit(bool& theActiveTransmit) const
{
    if (true == myBitSet[INDEX_myActiveTransmit])
    {
        theActiveTransmit = myActiveTransmit;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgMemberRspBlk::GetPST(CT_SM_PST& thePst) const
{
    if (true == myBitSet[INDEX_PST])
    {
        thePst = myPST;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgMemberRspBlk::GetPSTQ(CT_SM_PSTQ& thePstq) const
{
    if (true == myBitSet[INDEX_PSTQ])
    {
        thePstq = myPSTQ;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgMemberRspBlk::GetSST(CT_SM_SST& theSst) const
{
    if (true == myBitSet[INDEX_SST])
    {
        theSst = mySST;
        return true;
    }
    else
    {
        return false;
    }
}
bool TL1_VcgMemberRspBlk::GetCondition(CT_ConditionType& theCond) const
{
    if (true == myBitSet[INDEX_myConditionType])
    {
        theCond = myConditionType;
        return true;
    }
    else
    {
        return false;
    }
}

void TL1_VcgMemberRspBlk::SetAddr(const CT_TL1_FacAddr& theInput)
{
    myBitSet[ INDEX_myAddr ] = true;
    myAddr = theInput;
}
void TL1_VcgRspBlk::SetCardType(const CT_CardType& theCardType )  
{
    myBitSet[ INDEX_myCardType ] = true; 
    myCardType = theCardType;
}

void TL1_VcgRspBlk::SetSubCardType(const CT_SubCardType& theSubCardType )  
{
    myBitSet[ INDEX_mySubCardType ] = true; 
    mySubCardType = theSubCardType;
}
void TL1_VcgMemberRspBlk::SetMemberAddr(const CT_TL1_FacAddr& memberAddr, const CT_XcFacType&  theInput)
{
    myBitSet[ INDEX_myMemberAddr ] = true;
    myBitSet[ INDEX_myMemberFacType ] = true;
    myMemberAddr = memberAddr;
    myMemberFacType = theInput;
}

void TL1_VcgMemberRspBlk::SetCrsAddr(const CT_TL1_FacAddr& crsAddr, const CT_XcFacType&  theInput)
{
    myBitSet[ INDEX_myCrsAddr ] = true;
    myBitSet[ INDEX_myCrsFacType ] = true;
    myCrsAddr = crsAddr;
    myCrsFacType = theInput;
}

void TL1_VcgMemberRspBlk::SetCct(const CT_XcType& theInput)
{
    myBitSet[ INDEX_myCct ] = true;
    myCct = theInput;
}
void TL1_VcgMemberRspBlk::SetAutocfg(const bool& theInput)
{
    myBitSet[ INDEX_myAutocfg ] = true;
    myAutocfg = theInput;
}
void TL1_VcgMemberRspBlk::SetVcatDd(const int& theInput)
{
    myBitSet[ INDEX_myVcatDd ] = true;
    myVcatDd = theInput;
}
void TL1_VcgMemberRspBlk::SetActiveTransmit(const bool& theInput)
{
    myBitSet[ INDEX_myActiveTransmit ] = true;
    myActiveTransmit = theInput;
}
void TL1_VcgMemberRspBlk::SetActiveReceive(const bool& theInput)
{
    myBitSet[ INDEX_myActiveReceive ] = true;
    myActiveReceive = theInput;
}
void TL1_VcgMemberRspBlk::SetSequenceTransmit(const int& theInput)
{
    myBitSet[ INDEX_mySequenceTransmit ] = true;
    mySequenceTransmit = theInput;
}
void TL1_VcgMemberRspBlk::SetSequenceReceive(const int& theInput)
{
    myBitSet[ INDEX_mySequenceReceive ] = true;
    mySequenceReceive = theInput;
}
void TL1_VcgMemberRspBlk::SetPST(const CT_SM_PST& theInput)
{
    myBitSet[ INDEX_PST ] = true;
    myPST = theInput;
}
void TL1_VcgMemberRspBlk::SetPSTQ(const CT_SM_PSTQ& theInput)
{
    myBitSet[ INDEX_PSTQ ] = true;
    myPSTQ = theInput;
}
void TL1_VcgMemberRspBlk::SetSST(const CT_SM_SST& theInput)
{
    myBitSet[ INDEX_SST ] = true;
    mySST = theInput;
}
void TL1_VcgMemberRspBlk::SetCondition(const CT_ConditionType& theCond)
{
    myBitSet[ INDEX_myConditionType ] = true;
    myConditionType = theCond;
}


